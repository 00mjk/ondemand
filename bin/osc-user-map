#!/bin/env ruby

VERSION = '0.0.1'

if ARGV[0] == "-v"
  puts "osc-user-map v#{VERSION}"
  exit
end

#
# osc-user-map
#
# Specification
# 1. Must accept a single argument that is URL encoded.
# 2. If successful at mapping user, must return ONLY the user name to `stdout`.
# 3. If unsuccessful at mapping, must return empty string to `stdout`.
#

require 'uri'
auth_user = URI.unescape ARGV[0]

# Use Google authentication for development server
#

GOOGLE_USERS = {
  '111507243067931506567@accounts.google.com' => 'jnicklas',
  '102555136695940613292@accounts.google.com' => 'jnicklas',
  '113597325271288644620@accounts.google.com' => 'efranz',
  '109838079349976181632@accounts.google.com' => 'an0047',
  '111644294145564711835@accounts.google.com' => 'dhudak',
  '112387922473213146150@accounts.google.com' => 'bmcmichael',
  '112840957665765361885@accounts.google.com' => 'bmcmichael',
  '100407568355706659061@accounts.google.com' => 'bmcmichael',
  '116681954918771948545@accounts.google.com' => 'bgohar'
}

sys_user = GOOGLE_USERS[auth_user]

# We found the system user!
if sys_user
  puts sys_user
  exit
end

# Use Grid Mapfile for production server
#

GRID_MAPFILE='/etc/grid-security/grid-mapfile'

# Don't slurp file
File.foreach(GRID_MAPFILE) do |line|
  if matches = %r{^"#{auth_user}" (\w+)$}.match(line)
    sys_user = matches[1]
    break
  end
end

# Print sys_user or empty string
puts sys_user || ""
