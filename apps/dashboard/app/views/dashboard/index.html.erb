<%= render partial: 'shared/welcome' %>

<div class="xdmod">
    <div id="jobsPanelDiv"></div>
    <div id="centerReportCardPanelDiv"></div>
    <div id="reportThumbnailsPanelDiv"></div>
</div>


    <%# This assumes @motd_file responds to `to_partial_path` %>
    <%= render @motd if @motd %>
<!--
<div class="row">
  <div class="col-md-8">
    <div class="xdmod">
      <div id="jobsPanelDiv"></div>
      <div id="centerReportCardPanelDiv"></div>
      <div id="reportThumbnailsPanelDiv"></div>
    </div>
  </div>
  <div class="col-md-4">
    <%# This assumes @motd_file responds to `to_partial_path` %>
    <%# render @motd if @motd %>
  </div>
</div>
-->
<script id="jobs-template" type="text/x-handlebars-template">
  <div class="well">
  <table class="table table-condensed">
    <thead>
      <tr>
        <th>User</th>
        <th>Job ID</th>
        <th>Cluster/Resource</th>
        <th>Start</th>
        <th>End</th>
        <th>Walltime Used</th>
        <th>CPU</th>
      </tr>
    </thead>
    <tbody>
      {{#each results}}
      <tr>
        <td>{{name}}</td>
        <td>{{local_job_id}}</td>
        <td>{{resource}}</td>
        <td>{{start_time_ts}}</td>
        <td>{{end_time_ts}}</td>
        <td></td>
        <td></td>
      </tr>
      {{/each}}
    </tbody>
  </table>
  </div>
</script>


<!--
failedRuns red 660
underPerformingRuns: orange  469
inControl: green  0
overPerforming: blue  41


-->

<script id="perf-template" type="text/x-handlebars-template">
  <div class="well">
  <table class="table table-condensed">
    <thead>
      <tr>
        <th>Cluster/Resource</th>
        <th>App Kernel</th>
        <th>Status</th>
      </tr>
    </thead>
    <tbody>
      {{#each results}}
      <tr>
        <td width="100px">{{resource}}</td>
        <td width="100px">{{app_kernel}}</td>
        <td>
          <div class="progress">
            <div class="progress-bar progress-bar-danger" style="width: {{failed_percent}}%">
              <span class="sr-only">10% Complete (danger)</span>
            </div>
            <div class="progress-bar progress-bar-warning" style="width: {{underperforming_percent}}%">
              <span class="sr-only">20% Complete (warning)</span>
            </div>
            <div class="progress-bar progress-bar-success" style="width: {{incontrol_percent}}%">
              <span class="sr-only">35% Complete (success)</span>
            </div>
            <div class="progress-bar progress-bar-primary" style="width: {{overperforming_percent}}%">
              <span class="sr-only">35% Over Performing</span>
            </div>
          </div>
        </td>
      </tr>
      {{/each}}
    </tbody>
  </table>
  </div>
</script>

<script id="report-template" type="text/x-handlebars-template">
  <div class="well">
  <div class="row">
    {{#each data.queue}}
    <div class="col-md-3 col-xs-12">
      <a href="#" class="thumbnail">
        <div class="caption text-center"><small>Total CPU Hours and Jobs</small></div>
        <img class="img-responsive" src="{{thumbnail_src}}" data-src="holder.js/362x214">
      </a>
    </div>
    {{/each}}
  </div>
  </div>
</script>

<script>
var startOfYear = moment().startOf('year').format("YYYY-MM-DD"),
    thirtyDaysAgo = moment().subtract(30, 'days').format("YYYY-MM-DD"),
    today = moment().format("YYYY-MM-DD");


var jobsUrl = new URL('https://xdmod-test.hpc.osc.edu/rest/v1/warehouse/search/jobs');
jobsUrl.searchParams.set('_dc', Date.now());
jobsUrl.searchParams.set('start_date', thirtyDaysAgo);
jobsUrl.searchParams.set('end_date', today);
jobsUrl.searchParams.set('realm', 'Jobs');
jobsUrl.searchParams.set('limit', 10);
jobsUrl.searchParams.set('start', 0);
jobsUrl.searchParams.set('verbose', true);
jobsUrl.searchParams.set('params', JSON.stringify({}));

$.get(jobsUrl, function(jsonData){
  var template_source = $('#jobs-template').html();
  var template = Handlebars.compile(template_source);
  $('#jobsPanelDiv').html(template(jsonData));
});


// perf is from start of the year
var perfUrl = new URL('https://xdmod-test.hpc.osc.edu/rest/v1/app_kernels/performance_map/raw');
perfUrl.searchParams.set('_dc', Date.now());
perfUrl.searchParams.set('start_date', startOfYear);
perfUrl.searchParams.set('end_date', today);

$.get(perfUrl, function(jsonData){
  var template_source = $('#perf-template').html();
  var template = Handlebars.compile(template_source);
  var total_runs = function(obj){
    return obj.failedRuns + obj.inControlRuns + obj.overPerformingRuns + obj.underPerformingRuns;
  }

  var helpers = {
    failed_percent: function(){
      return (this.failedRuns*1.0 / total_runs(this))*100;
    },
    incontrol_percent: function(){
      return (this.inControlRuns*1.0 / total_runs(this))*100;
    },
    overperforming_percent: function(){
      return (this.overPerformingRuns*1.0 / total_runs(this))*100;
    },
    underperforming_percent: function(){
      return (this.underPerformingRuns*1.0 / total_runs(this))*100;
    }
  };
  $('#centerReportCardPanelDiv').html(template(jsonData, {helpers: helpers}));
});


var reportUrl = new URL('https://xdmod-test.hpc.osc.edu/rest/v1/dashboard/rolereport');
reportUrl.searchParams.set('_dc', Date.now());

$.get(reportUrl, function(jsondata){
  var template_source = $('#report-template').html(),
      template = Handlebars.compile(template_source),

      // TODO: add optional start/end date strings with query params:
      // url.searchParams.set('start', '2019-10-22')
      // url.searchParams.set('end', '2019-11-21')
      // url.searchParams.set('type', 'cached')
      helpers = {
        thumbnail_src: function(){
          // TODO: polyfills for URL and URLSearchParams
          var url = new URL("https://xdmod-test.hpc.osc.edu"+ this.thumbnail_link);

          // TODO: should token be set to something?
          url.searchParams.delete('token');

          return url.toString();
        }
      };


  // TODO: let user vary the start and stop date range
  $('#reportThumbnailsPanelDiv').html(template(jsondata, {helpers: helpers}));
});


// TODO: handle errors etc.
// TODO: testing client side integration using automated test! webmock FTW. Where vue would be nice :-P
</script>
