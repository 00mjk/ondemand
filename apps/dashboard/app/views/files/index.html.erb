<h2>files index page</h2>

<div class="text-right">
  <button type="button" class="btn btn-default btn-sm"><i class="fas fa-folder" aria-hidden="true"></i> Go To...</button>

  <%# FIXME: open in terminal should be dropdown of all clusters (with default) %>
  <button type="button" class="btn btn-default btn-sm"><i class="fas fa-terminal" aria-hidden="true"></i> Open in Terminal</button>
  <button id="new-file-btn" type="button" class="btn btn-default btn-sm"><i class="fas fa-plus" aria-hidden="true"></i> New File</button>
  <button id="new-dir-btn" type="button" class="btn btn-default btn-sm"><i class="fas fa-folder-plus" aria-hidden="true"></i> New Directory</button>
  <button id="upload-btn" type="button" class="btn btn-default btn-sm"><i class="fas fa-upload" aria-hidden="true"></i> Upload</button>
  <label>
    <input type="checkbox" id="show-dotfiles"> Show Dotfiles
  </label>
  <label>
    <input type="checkbox" id="show-owner-mode"> Show Owner/Mode
  </label>
</div>

<ol id="breadcrumbs" class="breadcrumb">
  <%= render partial: 'breadcrumb', collection: @path.descend, as: :file %>
</ol>

<div class="row">
<div class="col-md-3">
<%# FIXME: need a better solution instead of favorite links tied to an app? duplicates code in OodApp#links %>
<ul class="nav nav-pills nav-stacked well well-sm">
  <li role="presentation"><%= link_to 'Home Directory', files_path(Dir.home), style: "padding-top: 5px;padding-bottom: 5px;", class: "d" %></li>
  <% OodFilesApp.new.favorite_paths.each do |p| %>
    <li><%= link_to p.title || p.path.to_s, files_path(p.path.to_s), style: "padding-top: 5px;padding-bottom: 5px;" %>
  <% end %>
</ul>
</div>

<div class="col-md-9">

<div>
  <button type="button" class="btn btn-default btn-sm"><i class="fas fa-eye" aria-hidden="true"></i> View</button>
  <button type="button" class="btn btn-default btn-sm"><i class="fas fa-edit" aria-hidden="true"></i> Edit</button>
  <button id="rename-btn" type="button" class="btn btn-default btn-sm"><i class="fas fa-font" aria-hidden="true"></i> Rename</button>
  <button id="download-btn" type="button" class="btn btn-primary btn-sm"><i class="fas fa-download" aria-hidden="true"></i> Download</button>
  <button type="button" class="btn btn-default btn-sm"><i class="fas fa-copy" aria-hidden="true"></i> Copy/Move</button>
  <button type="button" class="btn btn-danger pull-right btn-sm"><i class="fas fa-trash" aria-hidden="true"></i> Delete</button>
</div>

<table class="table table-striped table-condensed" id="directory-contents">
  <thead>
    <tr>
      <th>Type</th>
      <th>Name</th>
      <th>Size</th>
      <th>Modified at</th>
      <th>Owner</th>
      <th>Mode</th>
    </tr>
  </thead>
  <tbody>
  </tbody>
</table>

</div>
</div>

<%# FIXME: problem with not using tables %>
<script>
history.replaceState({
  currentDirectory: '<%= @path %>',
  currentDirectoryUrl: '<%= files_path(@path) %>'
}, null);

$.fn.dataTable.ext.search.push(
    function( settings, data, dataIndex  ) {
      return $('#show-dotfiles').is(':checked') || ! data[1].startsWith('.');
    }
)

var table = $('#directory-contents').DataTable({
  ajax: {
    url: history.state.currentDirectoryUrl,
    dataSrc: 'files'
  },
  rowId: 'id',
  paging:false,
  //FIXME: need some mixture of flexbox to control height
  scrollY: '65vh',
  scrollCollapse: true,
  select: {
    style: 'os',
    className: 'selected info',
    toggleable: false
  },
  columns: [
    { data: 'type', render: (data, type, row, meta) => data == 'd' ? '<span title="directory" class="fa fa-folder" style="color: gold"></span>' : '<span title="file" class="fa fa-file" style="color: lightgrey"></span>' }, // type
    { data: 'name', render: (data, type, row, meta) => `<a class="${row.type}" href="${row.url}">${Handlebars.escapeExpression(data)}</a>` }, // name
    { data: 'size' }, // size
    { data: 'modified_at' }, // modified_at
    { data: 'owner', visible: $('#show-owner-mode').is(':checked') }, // owner
    { data: 'mode', visible: $('#show-owner-mode').is(':checked') } // mode
  ]
});

function reloadTable(id){
  table.ajax.reload();

  if(id){
    table.row(id).select();
  }
}

$('#show-dotfiles').change(() => table.draw());

// TODO: https://datatables.net/reference/button/colvis
$('#show-owner-mode').change(() => {
  let visible = $('#show-owner-mode').is(':checked');
  table.column(4).visible(visible);
  table.column(5).visible(visible);
});

// FIXME:
// upon creating new dir or new file
// should actually update view AND set file as selected

$('#new-file-btn').click(() => {
  Swal.fire({
    title: 'New File',
    input: 'text',
    inputLabel: 'Filename',
    showCancelButton: true,
    inputValidator: (value) => {
      if (! value) {
        // TODO: validate filenames against listing
        return 'Provide a filename'
      }
    },
    showClass: {
      popup: 'swal2-noanimation',
      backdrop: 'swal2-noanimation'
    },
    hideClass: {
      popup: '',
      backdrop: ''
    }
  })
  // FIXME: do not allow / in the filename or ..
  // error cases
  .then((result) => { if(result.isConfirmed){ return Promise.resolve(result.value); }})
  .then((filename) => fetch(`${history.state.currentDirectoryUrl}/${encodeURI(filename)}`, {method: 'put'}))
  // TODO: parse JSON response to get id of file created
  .then(() => reloadTable())
});

$('#new-dir-btn').click(() => {
  Swal.fire({
    title: 'New Directory',
    input: 'text',
    inputLabel: 'Directory name',
    showCancelButton: true,
    inputValidator: (value) => {
      if (! value) {
        // TODO: validate filenames against listing
        return 'Provide a directory name'
      }
    },
    showClass: {
      popup: 'swal2-noanimation',
      backdrop: 'swal2-noanimation'
    },
    hideClass: {
      popup: '',
      backdrop: ''
    }
  })
  // FIXME: do not allow / in the filename or ..
  // error cases
  .then((result) => { if(result.isConfirmed){ return Promise.resolve(result.value); }})
  .then((filename) => fetch(`${history.state.currentDirectoryUrl}/${encodeURI(filename)}?dir=true`, {method: 'put'}))
  // TODO: parse JSON response to get id of file created
  .then(() => reloadTable())
});

$('#rename-btn').click(() => {
  let selection = table.rows({selected: true}).data();
  if(selection.length != 1){
    Swal.fire('Cannot rename selection', 'Need only 1 item selected to rename', 'error')
  }
  else{
    // if there was some other attribute that just had the name...
    let filename = $($.parseHTML(selection[0].name)).text();

    Swal.fire({
      title: 'Rename',
      input: 'text',
      inputLabel: 'Filename',
      inputValue: filename,
      showCancelButton: true,
      inputValidator: (value) => {
        if (! value) {
          // TODO: validate filenames against listing
          return 'Provide a filename to rename this to';
        }
        else if (value.includes('/') || value.includes('..')){
         return 'Filename cannot include / or ..';
        }
      },
      showClass: {
        popup: 'swal2-noanimation',
        backdrop: 'swal2-noanimation'
      },
      hideClass: {
        popup: '',
        backdrop: ''
      }
    })
    // FIXME: do not allow / in the filename or ..
    // error cases
    .then((result) => { if(result.isConfirmed){ return Promise.resolve(result.value); }})
    .then((new_filename) => fetch('<%= files_mv_path %>', {method: 'put', body: JSON.stringify({from: `${history.state.currentDirectory}/${filename}`, to: `${history.state.currentDirectory}/${new_filename}`})}))
    .then(() => reloadTable())
  }
});

// refactor then replace...

$('#download-btn').click(() => {
  let selection = table.rows({selected: true}).data();
  if(selection.length != 1){
    Swal.fire('Select only 1 file to download', 'You have selected none or multiple rows', 'error')
  }
  else if(selection[0].type == "dir"){
    Swal.fire('Cannot download directory', 'Can only download files', 'error')
    // TODO
  }
  else {
    // creating the temporary iframe is exactly what the CloudCmd does
    // so this just repeats the status quo

    // FIXME: currentDirectoryUrl possible escaping issues... what if path has spaces etc.
    let filename = $($.parseHTML(selection[0].name)).text(),
        downloadUrl = `${history.state.currentDirectoryUrl}/${encodeURI(filename)}?download=${Date.now().toString()}`,
        iframe = document.createElement('iframe'),
        TIME = 30 * 1000;
    iframe.setAttribute('class', 'hidden');
    iframe.setAttribute('src', downloadUrl);

    document.body.appendChild(iframe);

    setTimeout(function() { document.body.removeChild(iframe); }, TIME);
  }
});

//TODO: uppy locales supported - pull from server side locales
//TODO: accessibility analysis of solution

(function(){
  function closeAndResetUppyModal(uppy){
    uppy.getPlugin('Dashboard').closeModal();
    uppy.reset();
  }

  var csrf_token = document.getElementsByName('csrf-token')[0].content
  var uppy = Uppy.Core();
  uppy.use(Uppy.Dashboard, {
    trigger: '#upload-btn',
    fileManagerSelectionType: 'both',
    disableThumbnailGenerator: true,
    showLinkToFileUploadResult: false,
    closeModalOnClickOutside: true,
    closeAfterFinish: true,
    allowMultipleUploads: false,
    onRequestCloseModal: () => closeAndResetUppyModal(uppy),
  });
  uppy.use(Uppy.XHRUpload, {
    endpoint: '<%= files_upload_path %>',
    withCredentials: true,
    fieldName: 'file',
    limit: 1,
    headers: { 'X-CSRF-Token': csrf_token }
  });

  uppy.on('file-added', (file) => {
    uppy.setFileMeta(file.id, { parent: history.state.currentDirectory });
    if(file.meta.relativePath == null && file.data.webkitRelativePath){
      uppy.setFileMeta(file.id, { relativePath: file.data.webkitRelativePath });
    }
  });
})();


function goto(url, pushState = true){
  // update URL
  table.ajax.url(url);

  //FIXME: reload includes callback so if there is an error - we display it and change url back :-P
  table.ajax.reload(function(data){
    $('#breadcrumbs').html(data.breadcrumbs_html);

    //FIXME: control coupling
    //
    // update(url, callback)
    // goto(url)
    //
    if(pushState){
      history.pushState({
        currentDirectory: data.path,
        currentDirectoryUrl: data.url
      }, data.name, data.url)
    }
  });
}

window.onpopstate = function(event){
  // FIXME: handle edge case if state ! exist
  setTimeout(() => {
    goto(event.state.currentDirectoryUrl, false);
  }, 0);
};

// borrowed from Turbolinks
// event: MouseEvent
function clickEventIsSignificant(event) {
  return !(
    // (event.target && (event.target as any).isContentEditable)
       event.defaultPrevented
    || event.which > 1
    || event.altKey
    || event.ctrlKey
    || event.metaKey
    || event.shiftKey
  )
}

$('#directory-contents tbody, #breadcrumbs').on('click', 'a.d', function(){
  if(clickEventIsSignificant(event)){
    event.preventDefault();
    event.cancelBubble = true;
    if(event.stopPropagation) event.stopPropagation();

    goto(event.target.getAttribute("href"));
  }
});

$('#directory-contents tbody').on('dblclick', 'tr', function(){
    // handle doubleclick
    let a = this.querySelector('a');
    if(a.classList.contains('d')) goto(a.getAttribute("href"));
});

</script>
