# Open OnDemand Portal
#

# Listen on specified ip and port
#
Listen "${OOD_IP}"

# Generate OOD Portal VirutalHost
#
<VirtualHost "${OOD_IP}">

  # Name that the server uses to identify itself
  #
  ServerName "${OOD_SUBDOMAIN}"

  # Location of OOD Lua scripts
  #
  LuaRoot "${OOD_LUA_ROOT}"

  # Command used to map authenticated user to system user
  #
  SetEnv OOD_USER_MAP_CMD "${OOD_USER_MAP_CMD}"

  # Serve up publicly available assets
  #
  Alias "${OOD_PUBLIC_URI}" "${OOD_PUBLIC_ROOT}"
  <Directory "${OOD_PUBLIC_ROOT}">
    Options Indexes FollowSymLinks
    AllowOverride None
    Require all granted
  </Directory>

  # Reverse proxy to web servers on backend nodes using IP sockets
  #
  <Location "${OOD_NODE_URI}">
    AuthType openid-connect
    Require valid-user

    SetEnv OOD_NODE_URI "${OOD_NODE_URI}"
    LuaHookFixups node_proxy.lua node_proxy_handler
  </Location>

  # Reverse proxy to backend PUNs using unix sockets
  #
  <Location "${OOD_PUN_URI}">
    AuthType openid-connect
    Require valid-user

    SetEnv OOD_PUN_SOCKET_ROOT "${OOD_PUN_SOCKET_ROOT}"
    LuaHookFixups pun_proxy.lua pun_proxy_handler
  </Location>

  # Control backend PUN for specific user
  #
  <Location "${OOD_NGINX_URI}">
    AuthType openid-connect
    Require valid-user

    SetEnv OOD_NGINX_URI "${OOD_NGINX_URI}"
    SetEnv OOD_PUN_URI "${OOD_PUN_URI}"
    SetEnv OOD_PUN_STAGE_CMD "${OOD_PUN_STAGE_CMD}"
    LuaHookFixups nginx.lua nginx_handler
  </Location>

</VirtualHost>
