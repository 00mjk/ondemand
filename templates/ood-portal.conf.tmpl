#
# Open OnDemand Portal
#
# This config was generated by ood-portal-generator ${version}
#

# Listen on specified ip and port
#
Listen "${OOD_IP}"

# Generate OOD Portal VirutalHost
#
<VirtualHost "${OOD_IP}">

  # Name that the server uses to identify itself
  #
  ServerName "${OOD_SUBDOMAIN}"

  # Location of OOD Lua scripts
  #
  LuaRoot "${OOD_LUA_ROOT}"

  # Command used to map authenticated user to system user
  #
  SetEnv OOD_USER_MAP_CMD "${OOD_USER_MAP_CMD}"

  # Serve up publicly available assets from local file system:
  #
  #    https://${OOD_SUBDOMAIN}${OOD_PUBLIC_URI}/assets/images/osc-logo.png
  #    #=> ${OOD_PUBLIC_ROOT}/assets/images/osc-logo.png
  #
  Alias "${OOD_PUBLIC_URI}" "${OOD_PUBLIC_ROOT}"
  <Directory "${OOD_PUBLIC_ROOT}">
    Options Indexes FollowSymLinks
    AllowOverride None
    Require all granted
  </Directory>

  # Reverse proxy traffic to backend webserver through IP sockets:
  #
  #    https://${OOD_SUBDOMAIN}${OOD_NODE_URI}/HOST/PORT/index.html
  #    #=> http://HOST:PORT${OOD_NODE_URI}/HOST/PORT/index.html
  #
  #    wss://${OOD_SUBDOMAIN}${OOD_NODE_URI}/HOST/PORT/socket.io
  #    #=> ws://HOST:PORT${OOD_NODE_URI}/HOST/PORT/socket.io
  #
  <Location "${OOD_NODE_URI}">
    AuthType "${OOD_AUTH_TYPE}"
    Require valid-user

    SetEnv OOD_NODE_URI "${OOD_NODE_URI}"
    LuaHookFixups node_proxy.lua node_proxy_handler
  </Location>

  # Reverse proxy traffic to backend PUNs through Unix domain sockets:
  #
  #    https://${OOD_SUBDOMAIN}${OOD_PUN_URI}/dev/app/simulations/1
  #    #=> unix:/path/to/socket|http://localhost${OOD_PUN_URI}/dev/app/simulations/1
  #
  #    wss://${OOD_SUBDOMAIN}${OOD_PUN_URI}/shared/bob/app/socket
  #    #=> unix:/path/to/socket|ws://localhost${OOD_PUN_URI}/shared/bob/app/socket
  #
  <Location "${OOD_PUN_URI}">
    AuthType "${OOD_AUTH_TYPE}"
    Require valid-user

    SetEnv OOD_NGINX_URI "${OOD_NGINX_URI}"
    SetEnv OOD_PUN_SOCKET_ROOT "${OOD_PUN_SOCKET_ROOT}"
    LuaHookFixups pun_proxy.lua pun_proxy_handler
  </Location>

  # Control backend PUN for authenticated user:
  #
  #    https://${OOD_SUBDOMAIN}${OOD_NGINX_URI}/stop
  #    #=> stops the authenticated user's PUN
  #
  # See mod_ood_proxy for more details.
  #
  <Location "${OOD_NGINX_URI}">
    AuthType "${OOD_AUTH_TYPE}"
    Require valid-user

    SetEnv OOD_NGINX_URI "${OOD_NGINX_URI}"
    SetEnv OOD_PUN_URI "${OOD_PUN_URI}"
    SetEnv OOD_PUN_STAGE_CMD "${OOD_PUN_STAGE_CMD}"
    LuaHookFixups nginx.lua nginx_handler
  </Location>

</VirtualHost>
