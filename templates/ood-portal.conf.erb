<%- use_virtual_host = !OOD_IP.empty? && !OOD_SERVER_NAME.empty? -%>
<%- aliases = OOD_SERVER_ALIASES.split(":") -%>
#
# Open OnDemand Portal
#
# This config was generated by ood-portal-generator v<%= VERSION %>
#
# Using the following options:
#   OOD_IP='<%= OOD_IP %>'
#   OOD_PORT='<%= OOD_PORT %>'
#   OOD_SERVER_NAME='<%= OOD_SERVER_NAME %>'
#   OOD_SERVER_ALIASES='<%= OOD_SERVER_ALIASES %>'
#   OOD_LOGS='<%= OOD_LOGS %>'
#   OOD_SSL='<%= OOD_SSL %>'
#   OOD_SSL_REDIRECT='<%= OOD_SSL_REDIRECT %>'
#   OOD_SSL_CERT_FILE='<%= OOD_SSL_CERT_FILE %>'
#   OOD_SSL_KEY_FILE='<%= OOD_SSL_KEY_FILE %>'
#   OOD_SSL_CHAIN_FILE='<%= OOD_SSL_CHAIN_FILE %>'
#   OOD_LUA_ROOT='<%= OOD_LUA_ROOT %>'
#   OOD_LUA_LOG_LEVEL='<%= OOD_LUA_LOG_LEVEL %>'
#   OOD_PUN_STAGE_CMD='<%= OOD_PUN_STAGE_CMD %>'
#   OOD_PUN_MAX_RETRIES='<%= OOD_PUN_MAX_RETRIES %>'
#   OOD_USER_MAP_CMD='<%= OOD_USER_MAP_CMD %>'
#   OOD_PUN_SOCKET_ROOT='<%= OOD_PUN_SOCKET_ROOT %>'
#   OOD_PUBLIC_ROOT='<%= OOD_PUBLIC_ROOT %>'
#   OOD_HOST_REGEX='<%= OOD_HOST_REGEX %>'
#   OOD_PUN_URI='<%= OOD_PUN_URI %>'
#   OOD_NODE_URI='<%= OOD_NODE_URI %>'
#   OOD_RNODE_URI='<%= OOD_RNODE_URI %>'
#   OOD_NGINX_URI='<%= OOD_NGINX_URI %>'
#   OOD_PUBLIC_URI='<%= OOD_PUBLIC_URI %>'
#   OOD_ROOT_URI='<%= OOD_ROOT_URI %>'
#   OOD_AUTH_CILOGON='<%= OOD_AUTH_CILOGON %>'
#   OOD_AUTH_OIDC_URI='<%= OOD_AUTH_OIDC_URI %>'
#   OOD_AUTH_DISOVER_ROOT='<%= OOD_AUTH_DISCOVER_ROOT %>'
#   OOD_AUTH_DISOVER_URI='<%= OOD_AUTH_DISCOVER_URI %>'
#   OOD_AUTH_REGISTER_ROOT='<%= OOD_AUTH_REGISTER_ROOT %>'
#   OOD_AUTH_REGISTER_URI='<%= OOD_AUTH_REGISTER_URI %>'
#   OOD_AUTH_TYPE='<%= OOD_AUTH_TYPE %>'
#   OOD_AUTH_EXTEND='<%= OOD_AUTH_EXTEND.gsub("\n", '\n') %>'
#   OOD_MAP_FAIL_URI='<%= OOD_MAP_FAIL_URI %>'
#   OOD_ANALYTICS_OPT_IN='<%= OOD_ANALYTICS_OPT_IN %>'
<%- if OOD_ANALYTICS_OPT_IN -%>
#   OOD_ANALYTICS_TRACKING_URL='<%= OOD_ANALYTICS_TRACKING_URL %>'
#   OOD_ANALYTICS_TRACKING_ID='<%= OOD_ANALYTICS_TRACKING_ID %>'
<%- end -%>
#

<%- if use_virtual_host -%>
<%- if OOD_SSL && OOD_SSL_REDIRECT -%>
# Redirect http://<%= OOD_SERVER_NAME %> => https://<%= "#{OOD_SERVER_NAME}:#{OOD_PORT}" %>
<%- aliases.each do |a| -%>
# Redirect http://<%= a %> => https://<%= "#{OOD_SERVER_NAME}:#{OOD_PORT}" %>
<%- end -%>
#
Listen <%= "#{OOD_IP}:80" %>
<VirtualHost "<%= "#{OOD_IP}:80" %>">
  ServerName "<%= OOD_SERVER_NAME %>"
  <%- aliases.each do |a| -%>
  ServerAlias "<%= a %>"
  <%- end -%>
  Redirect permanent / https://<%= "#{OOD_SERVER_NAME}:#{OOD_PORT}" %>/
</VirtualHost>
<%- end -%>

# Listen on specified ip and port
#
Listen <%= "#{OOD_IP}:#{OOD_PORT}" %><%= ' https' if OOD_SSL %>

<%- if !aliases.empty? -%>
<%- aliases.each do |a| -%>
# Redirect <%= OOD_SSL ? "https" : "http" %>://<%= "#{a}:#{OOD_PORT}" %> => <%= OOD_SSL ? "https" : "http" %>://<%= "#{OOD_SERVER_NAME}:#{OOD_PORT}" %>
<%- end -%>
#
<VirtualHost "<%= "#{OOD_IP}:#{OOD_PORT}" %>">
  ServerName "<%= aliases.first %>"
  <%- aliases[1..-1].each do |a| -%>
  ServerAlias "<%= a %>"
  <%- end -%>
  Redirect permanent / <%= OOD_SSL ? "https" : "http"%>://<%= "#{OOD_SERVER_NAME}:#{OOD_PORT}" %>/

  <%- if OOD_SSL -%>
  # Enable SSL support
  #
  SSLEngine On
  <%- unless OOD_SSL_CERT_FILE.empty? -%>
  SSLCertificateFile "<%= OOD_SSL_CERT_FILE %>"
  <%- end -%>
  <%- unless OOD_SSL_KEY_FILE.empty? -%>
  SSLCertificateKeyFile "<%= OOD_SSL_KEY_FILE %>"
  <%- end -%>
  <%- unless OOD_SSL_CHAIN_FILE.empty? -%>
  SSLCertificateChainFile "<%= OOD_SSL_CHAIN_FILE %>"
  <%- end -%>
  <%- end -%>
</VirtualHost>
<%- end -%>

# Generate OOD Portal VirtualHost
# <%= OOD_SSL ? "https" : "http" %>://<%= "#{OOD_SERVER_NAME}:#{OOD_PORT}" %>
#
<VirtualHost "<%= "#{OOD_IP}:#{OOD_PORT}" %>">

  # Name that the server uses to identify itself
  #
  ServerName "<%= OOD_SERVER_NAME %>"

  <%- if OOD_LOGS -%>
  # Enable custom server logs
  #
  ErrorLog "logs/<%= OOD_SERVER_NAME %>_error.log"
  CustomLog "logs/<%= OOD_SERVER_NAME %>_access.log" combined
  <%- end -%>

  <%- if OOD_SSL -%>
  # Enable SSL support
  #
  SSLEngine On
  <%- unless OOD_SSL_CERT_FILE.empty? -%>
  SSLCertificateFile "<%= OOD_SSL_CERT_FILE %>"
  <%- end -%>
  <%- unless OOD_SSL_KEY_FILE.empty? -%>
  SSLCertificateKeyFile "<%= OOD_SSL_KEY_FILE %>"
  <%- end -%>
  <%- unless OOD_SSL_CHAIN_FILE.empty? -%>
  SSLCertificateChainFile "<%= OOD_SSL_CHAIN_FILE %>"
  <%- end -%>
  <%- end -%>
<%- end -%>

  <%- unless OOD_LUA_ROOT.empty? -%>
  # Location of OOD Lua scripts
  #
  LuaRoot "<%= OOD_LUA_ROOT %>"
  <%- end -%>

  <%- unless OOD_LUA_LOG_LEVEL.empty? -%>
  # Log level for OOD Lua scripts
  #
  LogLevel lua_module:<%= OOD_LUA_LOG_LEVEL %>
  <%- end -%>

  # Command used to map authenticated user to system user
  #
  SetEnv OOD_USER_MAP_CMD "<%= OOD_USER_MAP_CMD %>"

  # Command used to stage & control PUNs (runs as sudo)
  #
  SetEnv OOD_PUN_STAGE_CMD "<%= OOD_PUN_STAGE_CMD %>"

  <%- unless OOD_MAP_FAIL_URI.empty? -%>
  # Redirect user to this URI if fail to map to system user
  SetEnv OOD_MAP_FAIL_URI "<%= OOD_MAP_FAIL_URI %>"
  <%- end -%>

  <%- unless OOD_PUBLIC_URI.empty? -%>
  # Serve up publicly available assets from local file system:
  #
  #    https://<%= OOD_SERVER_NAME %><%= OOD_PUBLIC_URI %>/assets/images/osc-logo.png
  #    #=> <%= OOD_PUBLIC_ROOT %>/assets/images/osc-logo.png
  #
  Alias "<%= OOD_PUBLIC_URI %>" "<%= OOD_PUBLIC_ROOT %>"
  <Directory "<%= OOD_PUBLIC_ROOT %>">
    Options Indexes FollowSymLinks
    AllowOverride None
    Require all granted
  </Directory>
  <%- end -%>
  <%- unless OOD_NODE_URI.empty? -%>
  # Reverse proxy traffic to backend webserver through IP sockets:
  #
  #    https://<%= OOD_SERVER_NAME %><%= OOD_NODE_URI %>/HOST/PORT/index.html
  #    #=> http://HOST:PORT<%= OOD_NODE_URI %>/HOST/PORT/index.html
  #
  #    wss://<%= OOD_SERVER_NAME %><%= OOD_NODE_URI %>/HOST/PORT/socket.io
  #    #=> ws://HOST:PORT<%= OOD_NODE_URI %>/HOST/PORT/socket.io
  #
  <LocationMatch "^<%= OOD_NODE_URI %>/(?<host><%= OOD_HOST_REGEX %>)/(?<port>\d+)"
    AuthType "<%= OOD_AUTH_TYPE %>"
    Require valid-user
    <%- %><%= OOD_AUTH_EXTEND.gsub('\n', "\n").gsub(/^(?=[^$])/, " "*4) %>

    # ProxyPassReverse implementation
    Header edit Location "^[^/]+//[^/]+" ""

    # ProxyPassReverseCookieDomain implemenation
    Header edit* Set-Cookie ";\s*(?i)Domain[^;]*" ""

    # ProxyPassReverseCookiePath implementation
    Header edit* Set-Cookie ";\s*(?i)Path[^;]*" ""
    Header edit  Set-Cookie "^([^;]+)" "$1; Path=<%= OOD_NODE_URI %>/%{MATCH_HOST}e/%{MATCH_PORT}e"

    LuaHookFixups node_proxy.lua node_proxy_handler
  </LocationMatch>
  <%- end -%>

  <%- unless OOD_RNODE_URI.empty? -%>
  # Reverse "relative" proxy traffic to backend webserver through IP sockets:
  #
  #    https://<%= OOD_SERVER_NAME %><%= OOD_RNODE_URI %>/HOST/PORT/index.html
  #    #=> http://HOST:PORT/index.html
  #
  #    wss://<%= OOD_SERVER_NAME %><%= OOD_RNODE_URI %>/HOST/PORT/socket.io
  #    #=> ws://HOST:PORT/socket.io
  #
  <LocationMatch "^<%= OOD_RNODE_URI %>/(?<host><%= OOD_HOST_REGEX %>)/(?<port>\d+)(?<uri>/.*|)">
    AuthType "<%= OOD_AUTH_TYPE %>"
    Require valid-user
    <%- %><%= OOD_AUTH_EXTEND.gsub('\n', "\n").gsub(/^(?=[^$])/, " "*4) %>

    # ProxyPassReverse implementation
    Header edit Location "^([^/]+//[^/]+)|(?=/)" "<%= OOD_RNODE_URI %>/%{MATCH_HOST}e/%{MATCH_PORT}e"

    # ProxyPassReverseCookieDomain implemenation
    Header edit* Set-Cookie ";\s*(?i)Domain[^;]*" ""

    # ProxyPassReverseCookiePath implementation
    Header edit* Set-Cookie ";\s*(?i)Path[^;]*" ""
    Header edit  Set-Cookie "^([^;]+)" "$1; Path=<%= OOD_RNODE_URI %>/%{MATCH_HOST}e/%{MATCH_PORT}e"

    LuaHookFixups node_proxy.lua node_proxy_handler
  </LocationMatch>
  <%- end -%>

  <%- unless OOD_PUN_URI.empty? -%>
  # Reverse proxy traffic to backend PUNs through Unix domain sockets:
  #
  #    https://<%= OOD_SERVER_NAME %><%= OOD_PUN_URI %>/dev/app/simulations/1
  #    #=> unix:/path/to/socket|http://localhost<%= OOD_PUN_URI %>/dev/app/simulations/1
  #
  #    wss://<%= OOD_SERVER_NAME %><%= OOD_PUN_URI %>/shared/bob/app/socket
  #    #=> unix:/path/to/socket|ws://localhost<%= OOD_PUN_URI %>/shared/bob/app/socket
  #
  SetEnv OOD_PUN_URI "<%= OOD_PUN_URI %>"
  <Location "<%= OOD_PUN_URI %>">
    AuthType "<%= OOD_AUTH_TYPE %>"
    Require valid-user
    <%- %><%= OOD_AUTH_EXTEND.gsub('\n', "\n").gsub(/^(?=[^$])/, " "*4) %>

    SetEnv OOD_PUN_SOCKET_ROOT "<%= OOD_PUN_SOCKET_ROOT %>"
    SetEnv OOD_PUN_MAX_RETRIES "<%= OOD_PUN_MAX_RETRIES %>"
    LuaHookFixups pun_proxy.lua pun_proxy_handler
    ProxyPassReverse "http://localhost<%= OOD_PUN_URI %>"
    ProxyPassReverseCookieDomain "localhost" "<%= OOD_SERVER_NAME %>"

    # ProxyPassReverseCookiePath implementation (less restrictive)
    Header edit* Set-Cookie ";\s*(?i)Path\s*=(?-i)(?!\s*<%= OOD_PUN_URI %>)[^;]*" "; Path=<%= OOD_PUN_URI %>"

    <%- if OOD_ANALYTICS_OPT_IN -%>
    SetEnv OOD_ANALYTICS_TRACKING_URL "<%= OOD_ANALYTICS_TRACKING_URL %>"
    SetEnv OOD_ANALYTICS_TRACKING_ID "<%= OOD_ANALYTICS_TRACKING_ID %>"
    LuaHookLog analytics.lua analytics_handler
    <%- end -%>
  </Location>
  <%- end -%>

  <%- unless OOD_NGINX_URI.empty? -%>
  # Control backend PUN for authenticated user:
  #
  #    https://<%= OOD_SERVER_NAME %><%= OOD_NGINX_URI %>/stop
  #    #=> stops the authenticated user's PUN
  #
  # See mod_ood_proxy for more details.
  #
  SetEnv OOD_NGINX_URI "<%= OOD_NGINX_URI %>"
  <Location "<%= OOD_NGINX_URI %>">
    AuthType "<%= OOD_AUTH_TYPE %>"
    Require valid-user
    <%- %><%= OOD_AUTH_EXTEND.gsub('\n', "\n").gsub(/^(?=[^$])/, " "*4) %>

    LuaHookFixups nginx.lua nginx_handler
  </Location>
  <%- end -%>

  <%- unless OOD_ROOT_URI.empty? -%>
  # Redirect root URI to specified URI
  #
  #    https://<%= OOD_SERVER_NAME %>/
  #    #=> https://<%= OOD_SERVER_NAME %><%= OOD_ROOT_URI %>
  #
  RedirectMatch ^/$ "<%= OOD_ROOT_URI %>"
  <%- end -%>

  <%- unless OOD_AUTH_OIDC_URI.empty? -%>
  # OpenID Connect redirect URI:
  #
  #    https://<%= OOD_SERVER_NAME %><%= OOD_AUTH_OIDC_URI %>
  #    #=> handled by mod_auth_openidc
  #
  <Location "<%= OOD_AUTH_OIDC_URI %>">
    AuthType "<%= OOD_AUTH_TYPE %>"
    Require valid-user
    <%- %><%= OOD_AUTH_EXTEND.gsub('\n', "\n").gsub(/^(?=[^$])/, " "*4) %>
  </Location>
  <%- end -%>

  <%- unless OOD_AUTH_DISCOVER_URI.empty? -%>
  # Discover URI for OpenID Connect (used for multiple Id Providers):
  #
  #    https://<%= OOD_SERVER_NAME %><%= OOD_AUTH_DISCOVER_URI %>
  #    #=> <%= OOD_AUTH_DISCOVER_ROOT %>/
  #
  Alias "<%= OOD_AUTH_DISCOVER_URI %>" "<%= OOD_AUTH_DISCOVER_ROOT %>"
  <Directory "<%= OOD_AUTH_DISCOVER_ROOT %>">
    Options Indexes FollowSymLinks
    AllowOverride None
    Require all granted
  </Directory>
  <%- end -%>

  <%- unless OOD_AUTH_REGISTER_URI.empty? %>
  # Register unmapped user to grid-mapfile here:
  #
  #    https://<%= OOD_SERVER_NAME %><%= OOD_AUTH_REGISTER_URI %>
  #    #=> <%= OOD_AUTH_REGISTER_ROOT %>/
  #
  Alias "<%= OOD_AUTH_REGISTER_URI %>" "<%= OOD_AUTH_REGISTER_ROOT %>"
  <Directory "<%= OOD_AUTH_REGISTER_ROOT %>">
    Options Indexes FollowSymLinks
    AllowOverride None
    AuthType "<%= OOD_AUTH_TYPE %>"
    Require valid-user
    <%- %><%= OOD_AUTH_EXTEND.gsub('\n', "\n").gsub(/^(?=[^$])/, " "*4) %>
  </Directory>
  <%- end -%>

<%- if use_virtual_host -%>
</VirtualHost>
<%- end -%>
