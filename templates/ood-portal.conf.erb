#
# Open OnDemand Portal
#
# This config was generated by ood-portal-generator v<%= VERSION %>
#
# Using the following options:
#   OOD_IP='<%= OOD_IP %>'
#   OOD_SUBDOMAIN='<%= OOD_SUBDOMAIN %>'
#   OOD_AUTH_TYPE='<%= OOD_AUTH_TYPE %>'
#   OOD_LUA_ROOT='<%= OOD_LUA_ROOT %>'
#   OOD_PUN_STAGE_CMD='<%= OOD_PUN_STAGE_CMD %>'
#   OOD_USER_MAP_CMD='<%= OOD_USER_MAP_CMD %>'
#   OOD_PUN_SOCKET_ROOT='<%= OOD_PUN_SOCKET_ROOT %>'
#   OOD_PUBLIC_ROOT='<%= OOD_PUBLIC_ROOT %>'
#   OOD_PUN_URI='<%= OOD_PUN_URI %>'
#   OOD_NODE_URI='<%= OOD_NODE_URI %>'
#   OOD_RNODE_URI='<%= OOD_RNODE_URI %>'
#   OOD_NGINX_URI='<%= OOD_NGINX_URI %>'
#   OOD_PUBLIC_URI='<%= OOD_PUBLIC_URI %>'
#

<%- unless OOD_IP.empty? -%>
# Listen on specified ip and port
#
Listen "<%= OOD_IP %>"

# Generate OOD Portal VirutalHost
#
<VirtualHost "<%= OOD_IP %>">
<%- end -%>

  <%- unless OOD_SUBDOMAIN.empty? -%>
  # Name that the server uses to identify itself
  #
  ServerName "<%= OOD_SUBDOMAIN %>"
  <%- end -%>

  <%- unless OOD_LUA_ROOT.empty? -%>
  # Location of OOD Lua scripts
  #
  LuaRoot "<%= OOD_LUA_ROOT %>"
  <%- end %>

  # Command used to map authenticated user to system user
  #
  SetEnv OOD_USER_MAP_CMD "<%= OOD_USER_MAP_CMD %>"

  <%- unless OOD_PUBLIC_URI.empty? -%>
  # Serve up publicly available assets from local file system:
  #
  #    https://<%= OOD_SUBDOMAIN %><%= OOD_PUBLIC_URI %>/assets/images/osc-logo.png
  #    #=> <%= OOD_PUBLIC_ROOT %>/assets/images/osc-logo.png
  #
  Alias "<%= OOD_PUBLIC_URI %>" "<%= OOD_PUBLIC_ROOT %>"
  <Directory "<%= OOD_PUBLIC_ROOT %>">
    Options Indexes FollowSymLinks
    AllowOverride None
    Require all granted
  </Directory>
  <%- end %>

  <%- unless OOD_NODE_URI.empty? -%>
  # Reverse proxy traffic to backend webserver through IP sockets:
  #
  #    https://<%= OOD_SUBDOMAIN %><%= OOD_NODE_URI %>/HOST/PORT/index.html
  #    #=> http://HOST:PORT<%= OOD_NODE_URI %>/HOST/PORT/index.html
  #
  #    wss://<%= OOD_SUBDOMAIN %><%= OOD_NODE_URI %>/HOST/PORT/socket.io
  #    #=> ws://HOST:PORT<%= OOD_NODE_URI %>/HOST/PORT/socket.io
  #
  <Location "<%= OOD_NODE_URI %>">
    AuthType "<%= OOD_AUTH_TYPE %>"
    Require valid-user

    SetEnv OOD_NODE_URI "<%= OOD_NODE_URI %>"
    LuaHookFixups node_proxy.lua node_proxy_handler
  </Location>
  <%- end -%>

  <%- unless OOD_RNODE_URI.empty? -%>
  # Reverse "relative" proxy traffic to backend webserver through IP sockets:
  #
  #    https://<%= OOD_SUBDOMAIN %><%= OOD_RNODE_URI %>/HOST/PORT/index.html
  #    #=> http://HOST:PORT/index.html
  #
  #    wss://<%= OOD_SUBDOMAIN %><%= OOD_RNODE_URI %>/HOST/PORT/socket.io
  #    #=> ws://HOST:PORT/socket.io
  #
  <Location "<%= OOD_RNODE_URI %>">
    AuthType "<%= OOD_AUTH_TYPE %>"
    Require valid-user

    SetEnv OOD_NODE_URI "<%= OOD_RNODE_URI %>"
    SetEnv OOD_IS_RELATIVE "true"
    LuaHookFixups node_proxy.lua node_proxy_handler
  </Location>
  <%- end -%>

  <%- unless OOD_PUN_URI.empty? -%>
  # Reverse proxy traffic to backend PUNs through Unix domain sockets:
  #
  #    https://<%= OOD_SUBDOMAIN %><%= OOD_PUN_URI %>/dev/app/simulations/1
  #    #=> unix:/path/to/socket|http://localhost<%= OOD_PUN_URI %>/dev/app/simulations/1
  #
  #    wss://<%= OOD_SUBDOMAIN %><%= OOD_PUN_URI %>/shared/bob/app/socket
  #    #=> unix:/path/to/socket|ws://localhost<%= OOD_PUN_URI %>/shared/bob/app/socket
  #
  <Location "<%= OOD_PUN_URI %>">
    AuthType "<%= OOD_AUTH_TYPE %>"
    Require valid-user

    SetEnv OOD_NGINX_URI "<%= OOD_NGINX_URI %>"
    SetEnv OOD_PUN_SOCKET_ROOT "<%= OOD_PUN_SOCKET_ROOT %>"
    LuaHookFixups pun_proxy.lua pun_proxy_handler
  </Location>
  <%- end -%>

  <%- unless OOD_NGINX_URI.empty? -%>
  # Control backend PUN for authenticated user:
  #
  #    https://<%= OOD_SUBDOMAIN %><%= OOD_NGINX_URI %>/stop
  #    #=> stops the authenticated user's PUN
  #
  # See mod_ood_proxy for more details.
  #
  <Location "<%= OOD_NGINX_URI %>">
    AuthType "<%= OOD_AUTH_TYPE %>"
    Require valid-user

    SetEnv OOD_NGINX_URI "<%= OOD_NGINX_URI %>"
    SetEnv OOD_PUN_URI "<%= OOD_PUN_URI %>"
    SetEnv OOD_PUN_STAGE_CMD "<%= OOD_PUN_STAGE_CMD %>"
    LuaHookFixups nginx.lua nginx_handler
  </Location>
  <%- end -%>

<%- unless OOD_IP.empty? -%>
</VirtualHost>
<%- end %>
