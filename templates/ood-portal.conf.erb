<%- use_virtual_host = !OOD_IP.empty? && !OOD_SERVER_NAME.empty? -%>
#
# Open OnDemand Portal
#
# This config was generated by ood-portal-generator v<%= VERSION %>
#
# Using the following options:
#   OOD_IP='<%= OOD_IP %>'
#   OOD_PORT='<%= OOD_PORT %>'
#   OOD_SSL='<%= OOD_SSL %>'
#   OOD_SSL_REDIRECT='<%= OOD_SSL_REDIRECT %>'
#   OOD_SERVER_NAME='<%= OOD_SERVER_NAME %>'
#   OOD_LUA_ROOT='<%= OOD_LUA_ROOT %>'
#   OOD_PUN_STAGE_CMD='<%= OOD_PUN_STAGE_CMD %>'
#   OOD_PUN_MAX_RETRIES='<%= OOD_PUN_MAX_RETRIES %>'
#   OOD_USER_MAP_CMD='<%= OOD_USER_MAP_CMD %>'
#   OOD_PUN_SOCKET_ROOT='<%= OOD_PUN_SOCKET_ROOT %>'
#   OOD_PUBLIC_ROOT='<%= OOD_PUBLIC_ROOT %>'
#   OOD_PUN_URI='<%= OOD_PUN_URI %>'
#   OOD_NODE_URI='<%= OOD_NODE_URI %>'
#   OOD_RNODE_URI='<%= OOD_RNODE_URI %>'
#   OOD_NGINX_URI='<%= OOD_NGINX_URI %>'
#   OOD_PUBLIC_URI='<%= OOD_PUBLIC_URI %>'
#   OOD_ROOT_URI='<%= OOD_ROOT_URI %>'
#   OOD_AUTH_SETUP='<%= OOD_AUTH_SETUP %>'
<%- if OOD_AUTH_SETUP -%>
#   OOD_AUTH_OIDC_URI='<%= OOD_AUTH_OIDC_URI %>'
#   OOD_AUTH_DISOVER_ROOT='<%= OOD_AUTH_DISCOVER_ROOT %>'
#   OOD_AUTH_DISOVER_URI='<%= OOD_AUTH_DISCOVER_URI %>'
#   OOD_AUTH_REGISTER_ROOT='<%= OOD_AUTH_REGISTER_ROOT %>'
#   OOD_AUTH_REGISTER_URI='<%= OOD_AUTH_REGISTER_URI %>'
<%- end -%>
#   OOD_AUTH_TYPE='<%= OOD_AUTH_TYPE %>'
#   OOD_MAP_FAIL_URI='<%= OOD_MAP_FAIL_URI %>'
#

<%- if use_virtual_host -%>
<%- if OOD_SSL && OOD_SSL_REDIRECT -%>
# Redirect http => https
#
Listen <%= "#{OOD_IP}:80" %>
<VirtualHost "<%= "#{OOD_IP}:80" %>">
  ServerName "<%= OOD_SERVER_NAME %>"
  Redirect permanent / https://<%= OOD_SERVER_NAME %><%= ":#{OOD_PORT}" if OOD_PORT != '443' %>/
</VirtualHost>
<%- end -%>

# Listen on specified ip and port
#
Listen <%= "#{OOD_IP}:#{OOD_PORT}" %><%= ' https' if OOD_SSL %>

# Generate OOD Portal VirutalHost
#
<VirtualHost "<%= "#{OOD_IP}:#{OOD_PORT}" %>">

  # Name that the server uses to identify itself
  #
  ServerName "<%= OOD_SERVER_NAME %>"

  <%- if OOD_SSL %>
  # Enable SSL support
  #
  SSLEngine On
  <%- end -%>
<%- end -%>

  <%- unless OOD_LUA_ROOT.empty? -%>
  # Location of OOD Lua scripts
  #
  LuaRoot "<%= OOD_LUA_ROOT %>"
  <%- end %>

  # Command used to map authenticated user to system user
  #
  SetEnv OOD_USER_MAP_CMD "<%= OOD_USER_MAP_CMD %>"

  # Command used to stage & control PUNs (runs as sudo)
  #
  SetEnv OOD_PUN_STAGE_CMD "<%= OOD_PUN_STAGE_CMD %>"

  <%- unless OOD_MAP_FAIL_URI.empty? -%>
  # Redirect user to this URI if fail to map to system user
  SetEnv OOD_MAP_FAIL_URI "<%= OOD_MAP_FAIL_URI %>"
  <%- end %>

  <%- unless OOD_PUBLIC_URI.empty? -%>
  # Serve up publicly available assets from local file system:
  #
  #    https://<%= OOD_SERVER_NAME %><%= OOD_PUBLIC_URI %>/assets/images/osc-logo.png
  #    #=> <%= OOD_PUBLIC_ROOT %>/assets/images/osc-logo.png
  #
  Alias "<%= OOD_PUBLIC_URI %>" "<%= OOD_PUBLIC_ROOT %>"
  <Directory "<%= OOD_PUBLIC_ROOT %>">
    Options Indexes FollowSymLinks
    AllowOverride None
    Require all granted
  </Directory>
  <%- end %>

  <%- unless OOD_NODE_URI.empty? -%>
  # Reverse proxy traffic to backend webserver through IP sockets:
  #
  #    https://<%= OOD_SERVER_NAME %><%= OOD_NODE_URI %>/HOST/PORT/index.html
  #    #=> http://HOST:PORT<%= OOD_NODE_URI %>/HOST/PORT/index.html
  #
  #    wss://<%= OOD_SERVER_NAME %><%= OOD_NODE_URI %>/HOST/PORT/socket.io
  #    #=> ws://HOST:PORT<%= OOD_NODE_URI %>/HOST/PORT/socket.io
  #
  <Location "<%= OOD_NODE_URI %>">
    AuthType "<%= OOD_AUTH_TYPE %>"
    Require valid-user

    SetEnv OOD_NODE_URI "<%= OOD_NODE_URI %>"
    LuaHookFixups node_proxy.lua node_proxy_handler
  </Location>
  <%- end -%>

  <%- unless OOD_RNODE_URI.empty? -%>
  # Reverse "relative" proxy traffic to backend webserver through IP sockets:
  #
  #    https://<%= OOD_SERVER_NAME %><%= OOD_RNODE_URI %>/HOST/PORT/index.html
  #    #=> http://HOST:PORT/index.html
  #
  #    wss://<%= OOD_SERVER_NAME %><%= OOD_RNODE_URI %>/HOST/PORT/socket.io
  #    #=> ws://HOST:PORT/socket.io
  #
  <Location "<%= OOD_RNODE_URI %>">
    AuthType "<%= OOD_AUTH_TYPE %>"
    Require valid-user

    SetEnv OOD_NODE_URI "<%= OOD_RNODE_URI %>"
    SetEnv OOD_IS_RELATIVE "true"
    LuaHookFixups node_proxy.lua node_proxy_handler
  </Location>
  <%- end -%>

  <%- unless OOD_PUN_URI.empty? -%>
  # Reverse proxy traffic to backend PUNs through Unix domain sockets:
  #
  #    https://<%= OOD_SERVER_NAME %><%= OOD_PUN_URI %>/dev/app/simulations/1
  #    #=> unix:/path/to/socket|http://localhost<%= OOD_PUN_URI %>/dev/app/simulations/1
  #
  #    wss://<%= OOD_SERVER_NAME %><%= OOD_PUN_URI %>/shared/bob/app/socket
  #    #=> unix:/path/to/socket|ws://localhost<%= OOD_PUN_URI %>/shared/bob/app/socket
  #
  <Location "<%= OOD_PUN_URI %>">
    AuthType "<%= OOD_AUTH_TYPE %>"
    Require valid-user

    SetEnv OOD_NGINX_URI "<%= OOD_NGINX_URI %>"
    SetEnv OOD_PUN_SOCKET_ROOT "<%= OOD_PUN_SOCKET_ROOT %>"
    SetEnv OOD_PUN_MAX_RETRIES "<%= OOD_PUN_MAX_RETRIES %>"
    LuaHookFixups pun_proxy.lua pun_proxy_handler
  </Location>
  <%- end -%>

  <%- unless OOD_NGINX_URI.empty? -%>
  # Control backend PUN for authenticated user:
  #
  #    https://<%= OOD_SERVER_NAME %><%= OOD_NGINX_URI %>/stop
  #    #=> stops the authenticated user's PUN
  #
  # See mod_ood_proxy for more details.
  #
  <Location "<%= OOD_NGINX_URI %>">
    AuthType "<%= OOD_AUTH_TYPE %>"
    Require valid-user

    SetEnv OOD_NGINX_URI "<%= OOD_NGINX_URI %>"
    SetEnv OOD_PUN_URI "<%= OOD_PUN_URI %>"
    LuaHookFixups nginx.lua nginx_handler
  </Location>
  <%- end -%>

  <%- unless OOD_ROOT_URI.empty? %>
  # Redirect root URI to specified URI
  #
  #    https://<%= OOD_SERVER_NAME %>/
  #    #=> https://<%= OOD_SERVER_NAME %><%= OOD_ROOT_URI %>
  #
  RedirectMatch ^/$ "<%= OOD_ROOT_URI %>"
  <%- end -%>

  <%- if OOD_AUTH_SETUP -%>
  # OpenID Connect redirect URI:
  #
  #    https://<%= OOD_SERVER_NAME %><%= OOD_AUTH_OIDC_URI %>
  #    #=> handled by mod_auth_openidc
  #
  <Location "<%= OOD_AUTH_OIDC_URI %>">
    AuthType "<%= OOD_AUTH_TYPE %>"
    Require valid-user
  </Location>

  # Discover URI for OpenID Connect (used for multiple Id Providers):
  #
  #    https://<%= OOD_SERVER_NAME %><%= OOD_AUTH_DISCOVER_URI %>
  #    #=> <%= OOD_AUTH_DISCOVER_ROOT %>/
  #
  Alias "<%= OOD_AUTH_DISCOVER_URI %>" "<%= OOD_AUTH_DISCOVER_ROOT %>"
  <Directory "<%= OOD_AUTH_DISCOVER_ROOT %>">
    Options Indexes FollowSymLinks
    AllowOverride None
    Require all granted
  </Directory>

  # Register unmapped user to grid-mapfile here:
  #
  #    https://<%= OOD_SERVER_NAME %><%= OOD_AUTH_REGISTER_URI %>
  #    #=> <%= OOD_AUTH_REGISTER_ROOT %>/
  #
  Alias "<%= OOD_AUTH_REGISTER_URI %>" "<%= OOD_AUTH_REGISTER_ROOT %>"
  <Directory "<%= OOD_AUTH_REGISTER_ROOT %>">
    Options Indexes FollowSymLinks
    AllowOverride None
    AuthType "<%= OOD_AUTH_TYPE %>"
    Require valid-user
  </Directory>
  <%- end -%>

<%- if use_virtual_host -%>
</VirtualHost>
<%- end %>
