// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or vendor/assets/javascripts of plugins, if any, can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file.
//
// Read Sprockets README (https://github.com/sstephenson/sprockets#sprockets-directives) for details
// about supported directives.
//
//= require jquery
//= require jquery_ujs
//= require bootstrap-sprockets
//= require dataTables/jquery.dataTables
//= require dataTables/bootstrap/3/jquery.dataTables.bootstrap
//= require lightbox
//= require_tree .

$(document).ready( function() {

    var table = $('#job_status_table').DataTable({
        ajax: './pages/json',       // 'pages#json'
        "sAjaxDataProp": "",        // There's no data header on the json.
        autoWidth: true,
        "aaSorting": [],            // Turn off auto sort.
        "pageLength": 50,            // Set the number of rows
        processing: true,           // Add the "processing" while json is being downloaded.
        columns: [
            {
                "className":        'details-control',
                "orderable":        false,
                "data":             null,
                "defaultContent":   ''
            },
            {
                data:               "pbsid",
                className:          "small"
            },
            {
                data:               "jobname",
                css:                "word-wrap: break-word;",
                className:          "small"
            },
            {
                data:               "username",
                className:          "small"
            },
            {
                data:               "group",
                className:          "small"
            },
            {
                data:               "status",
                className:          "small",
                "render":           function(data) {
                                        return status_label(data);
                                    }
            },
            {   data:               "cluster",
                className:          "small"
            }
        ]
    });
        // Optional, if you want full pagination controls.
        // Check dataTables documentation to learn more about available options.
        // http://datatables.net/reference/option/pagingType

    // Add event listener for opening and closing details
    $('#job_status_table tbody').on('click', '.details-control', function () {
        var tr = $(this).closest('tr');
        var row = table.row( tr );

        if ( row.child.isShown() ) {
            // This row is already open - close it
            row.child.hide();
            tr.removeClass('shown');
        }
        else {
            // Open this row
            row.child( format(row.data()) ).show();
            tr.addClass('shown');
            $.getJSON('./pages/json?pbsid='+row.data().pbsid , function(data) {
                $( "#" + data[0].name.replace(/\./g, '_') ).html(display_enhanced_job_data(data[0]));
            });
        }
    });
});

/* Formatting function for dropdown row. */
function format ( d ) {
    // `d` is the original data object for the row
    return          '<table>' +
                    '   <div class="panel panel-default">' +
                        display_job_info(d) +
                        display_node_rows(d) +
                    '   </div>' +
                    '</table>';
}

/* A function that builds a job data view */
function display_job_info( d ) {
    return          '<tr class="col-xs-12>' +
                    '   <div class="col-xs-12">' +
                    '       <tr><div class="job_data" id="'+d.pbsid.replace(/\./g, '_')+'"></div></tr>' +
                    '   </div>' +
                    '</tr>';
}

/* Build the ganglia images view */
function display_node_rows( d ) {
    var rows = "";
    // Ganglia accepts timestamps in seconds, not millis.
    var end = parseInt(Date.now()/1000);
    var start = d.starttime;
    if (d.nodes != null) {
        for (node in d.nodes) {
            var node_num = d.nodes[node];
            rows += '<div class="col-md-12">' +
                    '   <tr>' +
                    '       <td>' +
                    '           <div class="panel panel-default">' +
                    '              <div class="panel-heading"><h3 class="panel-title">' + node_num + '.ten.osc.edu <span class="pull-right">' + d.pbsid + '</span></h3></div>' +
                    '              <div class="panel-body">' +
                    '                   <a href="'+ build_ganglia_link(start, end, 'cpu_report', node_num, 'large') +'" data-lightbox="cpu-report" data-title="CPU Report '+node_num+'.ten.osc.edu"><img class="img-responsive col-lg-3 col-md-3 col-sm-6 col-xs-12" src="'+build_ganglia_link(start, end, 'cpu_report', node_num, 'small')+'" /></a>' +
                    '                   <a href="'+ build_ganglia_link(start, end, 'load_report', node_num, 'large') +'" data-lightbox="load-report" data-title="Load Report '+node_num+'.ten.osc.edu"><img class="img-responsive col-lg-3 col-md-3 col-sm-6 col-xs-12" src="'+build_ganglia_link(start, end, 'load_report', node_num, 'small')+'" /></a>' +
                    '                   <a href="'+ build_ganglia_link(start, end, 'mem_report', node_num, 'large') +'" data-lightbox="mem-report" data-title="Memory Report '+node_num+'.ten.osc.edu"><img class="img-responsive col-lg-3 col-md-3 col-sm-6 col-xs-12" src="'+build_ganglia_link(start, end, 'mem_report', node_num, 'small')+'" /></a>' +
                    '                   <a href="'+ build_ganglia_link(start, end, 'network_report', node_num, 'large') +'" data-lightbox="network-report" data-title="Network Report '+node_num+'.ten.osc.edu"><img class="img-responsive col-lg-3 col-md-3 col-sm-6 col-xs-12" src="'+build_ganglia_link(start, end, 'network_report', node_num, 'small')+'" /></a>' +
                    '              </div>' +
                    '           </div>' +
                    '       </td>' +
                    '   </tr>' +
                    '</div>';
        }
    }
    return rows;
}

function display_enhanced_job_data( d ) {

    return          '<div>' +
                    '   <tr>' +
                    '        <td>' +
                    '            <div class="panel panel-default">' +
                    '                <div class="panel-heading"><h3><strong>' + d.attribs.Job_Name + ' ('+ d.name +')</strong><span class="pull-right">' + status_label(d.attribs.job_state) + '</span></h3></div>' +
                    '                <div class="panel-body">' +
                    '                   <div class="col-md-4"><div class="panel panel-default"><div class="panel-heading">Job Information</div><div class="panel-body">'+build_job_information_panel( d )+'</div></div></div>' +
                    '                   <div class="col-md-4"><div class="panel panel-default"><div class="panel-heading">Resources Requested</div><div class="panel-body">'+build_resources_requested_panel( d )+'</div></div></div>' +
                    '                   <div class="col-md-4"><div class="panel panel-default"><div class="panel-heading">Resources Used</div><div class="panel-body">'+build_resources_used_panel( d )+'</div></div></div>' +
                    '                   <div class="col-md-12"><span>Output Location: <pre style="display: inline;">'+ d.attribs.Output_Path.split(":")[1]+'</pre></span></div>' +
                    '                </div>' +
                    '            </div>' +
                    '       </td>' +
                    '   </tr>' +
                    '</div>';
}

function is_defined( object ) {
    if (object === undefined || object === null) {
        return false;
    } else {
        return true;
    }
}

function build_job_information_panel( d ) {
    var _Job_Name = d.attribs.Job_Name;
    var _euser = d.attribs.euser;
    var _egroup = d.attribs.egroup;
    var _walltime_requested = d.attribs.Resource_List.walltime;
    var _walltime_used = (is_defined(d.attribs.resources_used) ? d.attribs.resources_used.walltime : '0');
    var _submit_args = d.attribs.submit_args;
    return          label_data("Job Name", _Job_Name) +
                    label_data("User Name", _euser) +
                    label_data("Group Name", _egroup) +
                    label_data("Walltime", _walltime_used + " / " + _walltime_requested) +
                    label_data("Submission", _submit_args);
}

function build_resources_requested_panel( d ) {
    var _nodes_requested = d.attribs.Resource_List.nodect;
    var _processors_per_node = d.attribs.Resource_List.nodes.split("ppn=")[1];
    var _walltime_requested = d.attribs.Resource_List.walltime;
    var _queue = d.attribs.queue;
    return          label_data("Nodes Requested", _nodes_requested) +
                    label_data("PPN Requested", _processors_per_node) +
                    label_data("Total Processors", (_nodes_requested * _processors_per_node)) +
                    label_data("Walltime Requested", _walltime_requested) +
                    label_data("Queue", _queue);
}

function build_resources_used_panel( d ) {
    var _cput = is_defined(d.attribs.resources_used) ? d.attribs.resources_used.cput : '';
    var _mem = is_defined(d.attribs.resources_used) ? d.attribs.resources_used.mem : '';
    var _vmem = is_defined(d.attribs.resources_used) ? d.attribs.resources_used.vmem : '';
    var _walltime = is_defined(d.attribs.resources_used) ? d.attribs.resources_used.walltime : '';
    return          label_data("CPU Time Used", _cput) +
                    label_data("Memory Used", _mem) +
                    label_data("Virtual Memory Used", _vmem) +
                    label_data("Run Time", _walltime);
}

function label_data(label, data) {
    return '<div><strong>'+label+': </strong><span class="pull-right">' + data + '</span></div>';
}

function build_ganglia_link( start_seconds, end_seconds, report_type, node_num, size ) {
    var system;
    if (node_num.startsWith('r')) {
        //Ruby
        system = "Ruby";
    }
    else if (node_num.startsWith('n')) {
        //Oakley
        system = "Oakley+nodes";
    }
    return 'https://cts05.osc.edu/od_monitor/graph.php?z='+size+'&openid_identifier=<%= ENV['REMOTE_USER'] %>&c='+system+'&cs='+start_seconds+'&ce='+end_seconds+'&g='+report_type+'&h=' + node_num + '.ten.osc.edu';
}

/* Formatting function for the status label. */
function status_label( status ) {
    var label, labelclass;
    switch( status ) {
        case "C":
            label = "Completed";
            labelclass = "label-success";
            break;
        case "R":
            label = "Running";
            labelclass = "label-primary";
            break;
        case "Q":
            label = "Queued";
            labelclass = "label-info";
            break;
        case "H":
            label = "Hold";
            labelclass = "label-warning";
            break;
        case "E":
            label = "Exiting";
            labelclass = "label-info";
            break;
        case "S":
            label = "Suspend";
            labelclass = "label-warning";
            break;
        case "T":
            label = "Transiting";
            labelclass = "label-warning";
            break;
        case "W":
            label = "Waiting";
            labelclass = "label-info";
            break;
        default:
            label = "Not Submitted";
            labelclass = "label-default";
    }
    return "<span class='label "+labelclass+"'>"+label+"</span>";
}
